"===========================================================================
" vim:ft=vim:noet:fdm=marker:commentstring=\"\ %s:ff=unix
" 	     File: texrc.vim
"      Author: Srinath Avadhanula
"     Created: Mon Apr 01 11:00 AM 2002 PST
"
" Description: This file contains resource configuration information for the 
" latex-suite package.
" 
"        NOTE: This file is best viewed with Vim-6.0+ with folding turned 
"        on.
"===========================================================================

" ==========================================================================
" RcLet: Set val of `rc` var only if not done already {{{
func! RcLet(varNm, ...)
  let l:key = v:null
  if a:0 < 1
    let l:val = 0
  elseif a:0 < 2
    let l:val = a:1
  else
    let l:key = a:1
    let l:val = a:2
  endif

  if exists(a:varNm)
    if (a:0 > 1)
      if type({a:varNm}) == v:t_dict
	if (a:0 > 1) && !has_key({a:varNm}, l:key)
	  let {a:varNm}[l:key] = l:val
	  return 1
	endif
      elseif type({a:varNm}) == v:t_list
	call add({a:varNm}, l:val)
	return 1
      endif
    endif
  else
    let {a:varNm} = l:val
    return 1
  endif

  return 0
endfunc
" }}}
" ==========================================================================
" General settings {{{

let g:tex_usePython = 0

" whether to turn on debugging
let g:tex_debug = 0
" If non empty, all the debugging information will be written to a file of
" this name.
let g:tex_debugLog = v:null

let g:tex_useIMAP = 0
let g:tex_useRunningImap = 1

" }}}
" ==========================================================================
" Rules: specifications of programs for compiling and viewing {{{
"

" By default, when you compile a tex file using \ll, then you will be
" generating a .dvi file. Change this line if you want to set another 
" default.
" NOTE: Make sure that a target for this format exists in the 'Compiler 
" rules'
"       section below and is set up properly for your system.
let g:tex_targ = "pdf"

let g:tex_doMultCompile = 1
" A comma seperated list of formats which need multiple compilations to be
" correctly compiled.
let g:tex_multCompileFmts = ["dvi", "pdf"]

" Uncomment this line if you compile ps files via dvi files.
let g:tex_fmtDeps_ps = ['dvi', 'ps']
let g:tex_fmtDeps_pdf = []

" --------------------------------------------------------------------------
" Compiler rules {{{
" This is the first thing you should customize. It is set up for most common
" values, but if use some other compiler, then you will want to change this.
" As CompileFlags value you'd perhaps like to use, e.g., '-src-specials',
" but it is known that it can sometimes give different results in the 
" output, so use it with care. The '-file-line-error' flag helps sanitize 
" LaTeX error messages for processing by Vim.
"relative to dir of main tex file

let g:tex_compilePrg_dvi = 'latex -interaction=nonstopmode '
      \.'-file-line-error-style "$*"'

let g:tex_escChars = '{}\'

let g:tex_compilePrg_ps = 'dvips -Ppdf -o "$*.ps" "$*.dvi"'

" ways to generate pdf files. there are soo many...
" NOTE: pdflatex generates the same output as latex. therefore quickfix is
"       possible.
" Synctex is now supported by pdflatex.

let g:tex_compilePrg_pdf = 'pdflatex'
let g:tex_outpDir = v:null
let g:tex_compilePrgOptDict_pdf = {}
let g:tex_compilePrgOptDict_pdf["-interaction"] = "nonstopmode"
let g:tex_compilePrgOptDict_pdf["-file-line-error-style"] = v:true

let g:tex_useMake = 0

" let g:tex_CompileRule_pdf = 'ps2pdf "$*.ps"'
" let g:tex_CompileRule_pdf = 'dvipdfm "$*.dvi"'
" let g:tex_CompileRule_pdf = 'dvipdf "$*.dvi"'

let g:tex_CompilePrg_html = 'latex2html "$*.tex"'

" }}}
" --------------------------------------------------------------------------
" Viewer rules {{{
" these programs are for viewing other formats.  NOTE: latex-suite will 
" automatically append file.<format> to these functions
"       when calling them. The viewer therefore cannot accept arguments 
"       after
"       the filename.
" NOTE: Windows users:
" 		Set your $PATH variable to include the full path to these programs.
if has('win32')
  let g:tex_viewPrg_ps = 'gsview32'
  let g:tex_viewPrg_pdf = 'AcroRd32'
  let g:tex_viewPrg_dvi = 'yap -1'
elseif has('osx') || has('macunix')
  " Let the system pick.  If you want, you can override the choice here.
  let g:tex_viewPrg_ps = v:null
  let g:tex_viewPrg_pdf = v:null
  " let g:tex_viewPrg_pdf = 'Acrobat\ Reader\ 5.1'
  let g:tex_viewPrg_dvi = v:null
  " Set this to 1 to disable opening a viewer with 'open -a'
  " Note: If you do this, you need to specify viewers above
  let g:tex_treatMacViewerAsUNIX = 0
else
  if executable('xdg-open')
    let g:tex_viewPrg_ps = 'xdg-open'
    let g:tex_viewPrg_pdf = 'xdg-open'
    let g:tex_viewPrg_dvi = 'xdg-open'
  else
    let g:tex_viewPrg_ps = 'gv'
    let g:tex_viewPrg_pdf = 'xpdf'
    let g:tex_viewPrg_dvi = 'xdvi'
  endif
  " the option below specifies an editor for the dvi viewer while starting
  " up the dvi viewer according to Dimitri Antoniou's tip on vim.sf.net 
  " (tip
  " #225)
endif
let g:tex_useEditorSettingInDVIViewer = 0
" For unix systems or macunix systens with enabled Tex_TreatMacViewerAsUNIX:
" Set this to 1 if you do not want to execute the viewer in the background
let g:tex_execNixViewerInForeground = 0

" Tex_ViewRuleComplete_{format}

" If a variable like this is specified, then it takes precedence over the
" variable with the same suffix defined above. i.e, Tex_ViewRuleComplete_dvi
" takes precedence over Tex_ViewRule_dvi. 
"
" If only Tex_ViewRule_{format} is specified, then latex-suite constructs 
" the
" actual system command which calls that program automatically. For example,
" if you specify Tex_ViewRule_dvi = 'kdvi', then latex-suite will issue the
" command
" 	!kdvi --unique file.dvi &
"
" However, if your viewer program accepts the file to be viewed in a way 
" which
" doesn't fit with the way latex-suite constructs the system command, then
" specify it using this variable. You can use the same format here which
" 'makeprg' accepts. So $* can be used in place of the main file name. 
"
" IMPORTANT: Make sure you make the process go into the background otherwise
"            vim will wait for the viewer to terminate before letting you 
"            edit
"            the file again.
"
" Example:
" Suppose you have a latex->html converter which converts a file say foo.tex
" to a file foo/index.html. Then you would use:
"
" 	let g:tex_viewRuleComplete_html = 'MozillaFirebird "$*/index.html" &'
"
" Doing something like this would not be possible using Tex_ViewRule_html
let g:tex_viewPrgComplete_dvi = v:null

" }}}
" --------------------------------------------------------------------------
" }}}
" ==========================================================================
" Compiler: latex-suite comes with a customizable compiler plugin. {{{
"           :help latex-compiling for a detailed description of these 
"           options.
"
" this is the list of patterns which will be ignored from the compiler 
" output.  This is a handy way of specifying which warnings/errors to 
" ignore.
let g:tex_ignWarnPats = [
      \ 'Underfull',
      \ 'Overfull',
      \ 'specifier changed to',
      \ 'You have requested',
      \ 'Missing number, treated as zero.',
      \ 'There were undefined references',
      \ 'Citation %.%# undefined',
      \ ]

" the 'ignore level' of the 'efm'. A value of 4 says that the first 4 kinds 
" of warnings in the list above will be ignored. Use the command TCLevel to 
" set a level dynamically.
let g:tex_ignLvl = len(g:tex_ignWarnPats)

" NOTE: The values of g:tex_Flavor and gLCompilerFlags are provided as a
"       way to make compiler/tex.vim standalone. i.e independent of the rest
"       of latex-suite. These variables are NOT used if you have already
"       defined g:tex_CompileRule_dvi above.
"
" specifies the current latex flavor.
let g:tex_flavor = 'latex'

" specifies the BibTeX flavor and if necessary options. If you use $* in 
" this setting, it will be replaced by the *root* of the main file name, 
" i.e, if the main file is "thesis.tex", $* will be "thesis".
let g:tex_bibPrg = 'biber'
let g:tex_bibPrgOptDict = {}

" specifies the MakeIndedx flavor and if necessary options. $* will be
" replaced by the *root* of the main file name. See above.
let g:tex_mkIdxFlavor = 'makeindex "$*.idx"'

" By default the program described by g:tex_Flavor above is called with the 
" flags '--src-specials --interaction=nonstopmode'. If your particular 
" version of latex does not accept these arguments, you will need to set 
" this variable to the appropriate value.
" NOTE: leave commented for using the default flags.
" TODO: Is it necessary (or even desirable) to use 2 variables to specify a
"       flavor and flags seperately? --SA
" let g:tex_CompilerFlags = v:null

" If disabled (set to 0) LaTeX-Suite doesn't go immediately to warnings or
" errors after compilation
let g:tex_gotoErr = 0

" If set to 1, then latex-suite shows the context of the error in a preview
" window beneath the window showing the actual errors.
let g:tex_showErrCntxt = 0

" Remove temp files created during part compilations when vim exits.
let g:tex_rmvTmpFiles = 1

" }}}
" ==========================================================================
" Project: how to deal with multi file projects via latex-suite {{{

" Use a valid vim expression here if you want to customize the way 
" latex-suite
" searches for a master file from within another file.
let g:tex_mainFileXpr = "main"

" }}}
" ==========================================================================
" Macros: latex-suite comes with a large number of macros to speed up {{{ 
" typing latex. 
"
" Place Holder Options: {{{
" (See |placeholders| for a description of what place-holders are).
"
" these options are actually used by imaps.vim, therefore the prefix is 
" Imap_
" and not Tex_. See |placeholders| for a description of how to use
" place-holders. You can either completely disable placeholders (not
" recommended) and/or you can change the place holder characters.

let g:imap_usePlaceHolders = 1
let g:imap_placeHolderStart = '<+'
let g:imap_placeHolderEnd = '+>'

" This option when set to 1 makes <C-J> in insert mode delete
" non-descriptive (empty) placeholders and enters insert mode.
" NOTE: This option _has_ to be set in the .vimrc. Setting this in a 
" filetype
"       plugin file such as ftplugin/tex.vim will not have any affect.
let g:imap_delEmptyPlaceHolders = 1

" When set to 1, in visual mode, <C-J> takes you to the next placeholder
" without deleting the current placeholder.
" NOTE: This option _has_ to be set in the .vimrc. Setting this in a 
" filetype
"       plugin file such as ftplugin/tex.vim will not have any affect.
let g:imap_stickyPlaceHolders = 1


" }}}
" Menu Wizard Option: {{{
" If the following variable is set to 1, then when an enviroment is chosen
" from the menu then for selected environments, latex-suite asks a series of
" questions on the command line and inserts a template with the 
" corresponding
" fields already filled in.
" Setting this to zero will insert a template with |placeholders| marking 
" off
" the places where fields need to be filled.
let g:tex_useMenuWiz = 0

" }}}
" Visual Mode Mapping Correction:  {{{
" With so many visual maps, its helpful to have a way of catching typing
" errors made in visual mode. What this does is to prompt you to correct 
" your
" visual mode mapping if you start out with g:tex_Leader and then type some
" illegal keys.
" It basically maps just the g:tex_Leader character to a function
let g:tex_catchVisMapErrs = 1

" }}}
" Diacritics: {{{
" whether or not you want to use diacritics (diacritics speed up typing  
" some languages. the way they are set up in latex-suite is
"  =char>  =  \'{<char>}
"  +char>  =  \v{<char>}
"  +}      = \"a
"  :o      = \^o
" Default: 0 
let g:tex_diacritics = 0

" }}}
" Leader Options: {{{
" The mappings in latex-suite are by default prefixed with the back-tick
" character. For example, `/ inserts \frac{<++>}{<++>}<++> etc. You can 
" change the prefix with the following setting.
" ',', '/', '`' are preferred values. '' or '\' will lead to a _lot_ of
" trouble.
" g:tex_Leader is also used for visual mode mappings for fonts.
let g:tex_leader = '`'

" In order to avoid ambiguity between the large number of visual mode macros
" provided, the visual mode macros for environments and sections start with 
" a character different from '`'.
let g:tex_leader2 = ','

" }}}
" Environment Macros: {{{
" These mappings insert LaTeX "environments" such as \begin{center}
"           <++>
"       \end{center}<++>
" with the cursor left at the first place-holder.
" (See |placeholders| for what these are.)
" Mnemonic:
" 1. All environment mappings begin with 'E'
" 2. If the environment can be broken up into 2 distinct words, such as 
"    flushright
"    (flush + right), then the next 2 letters are the first letters of the 2
"    words. Example:  >
"        flushleft  (_f_lush + _l_eft)  ---> EFL
"        flushright (_f_lush + _r_ight) ---> EFR
"        minipage   (_m_ini  + _p_age)  ---> EMP
"    If on the other hand, the environment name cannot be broken up into 2
"    distinct words, then the next 2 letters are the first 2 letters of the 
"    name
"    of the environment. Example:  >
"        equation (_eq_uation)          ---> EEQ
"
"    Please see texmaps.vim for the complete list.
" 
" Along with the insert mode mappings, a set of visual mode mappings is
" provided which encloses the visually selected region in an environment.
" These maps are related to the corresponding insert mode mappings by the
" following rule:
"     EFI           --> ,fi
" and so on. i.e, the leading E becomes '`' and the next 2 letters are small
" case. Some of the visual mode mappings are sensetive to whether you choose
" line-wise or character wise. For example, if you choose a word and press
" `ve, then you get \verb|word|, whereas if you press `ve on a line-wise
" selection, you get:
"       \begin{verbatim}
"           line
"       \end{verbatim}
" 
" these 2 options give finer control on which aspect of the macros you want
" to enable.
let g:tex_envMaps = 1
let g:tex_envMenus = 1

" Should a environment mapping end with a carriage return after "\end{...}"?
let g:tex_envEndWithCR = 1
" Should the label placed before or after the content?
let g:tex_labelAfterContent = 0
" Should an \item be followed by a carriage return?
let g:tex_itemsWithCR = 0

" Set up standard prefixes for labels.
let g:tex_envLabelPrefix_tab = "tab:"
let g:tex_envLabelPrefix_fig = "fig:"

" }}}
" Font Macros: {{{
" These mappings insert font descriptions such as:
"       \textsf{<++>}<++>
" again with the cursor at the first place-holder.
" Mnemonic:
" 1. first letter is always F (F for font)
" 2. next 2 letters are the 2 letters describing the font.
"
" Example: the above mapping is triggered by FSF.
"
" Just like environment mappings, you can visually select an area and press
" `sf to have it enclosed in:
"       \textsf{word}
" or
"       {\sffamily
"       line
"       }
" depending on character-wise or line-wise selection.
let g:tex_fontMaps = 1
let g:tex_fontMenus = 1

" }}}
" Section Macros: {{{
" Inserts LaTeX sections:
"       \section
" etc. Just as in the case of environments and fonts, can be enclosed with a
" visual selection. The enclosing is not sensetive to character or line-wise
" selection.
" NOTE: In visual mode, you are supposed to select the name of the section
" etc, not the whole section.
" In the following case, select just the first line, not lines 1-3.
"  1  section name
"  2  some lines in this section
"  3  and some more lines
" Mnemonic: (make your own!)
"       SPA for part
"       SCH for chapter
"       SSE for section
"       SSS for subsection
"       SS2 for subsubsection
"       SPG for paragraph
"       SSP for subparagraph
let g:tex_secMaps = 1
let g:tex_secMenus = 1

" }}}
" Auctex Style Mappings: {{{
" Auctex.vim has heavily inspired various portions of latex-suite providing
" various new ways of conviniently inserting environments.
"
" If you press <F5> in the insert mode while on an empty line, latex-suite
" prompts you with a list of environments you might want to insert. You can
" either choose one from the list or type in a new environment name.
" The variable below (which is a comma seperated list of environment names)
" decides the prompt which latex-suite generates.
" You can place as many items as you want here. If the environment name is a
" standard latex environment such as table or figure, then latex-suite will
" insert a template with additional fields, if not, just a bare bones
" \begin{env}
"   <++>
" \end{env} is inserted.
" \[ is also recognized.
" NOTE: Setting this variable to the empty string is a way of leaving the 
" <F5> key unmapped

let g:tex_promptEnvs = [
      \ 'equation*',
      \ 'align*',
      \ 'equation',
      \ 'align',
      \ 'enumerate',
      \ 'itemize',
      \ 'displaymath',
      \ 'figure',
      \ 'table'
      \ ]

" Another quick way of inserting environments is to press one of the shifted
" function keys from <F1> through <F4>.
" Each environment in the following list is mapped to a corresponding 
" shifted
" function key.  NOTE: Setting this variable to the empty string is a way  
" of leaving all the shifted function keys untouched by latex-suite.
" NOTE: Only the first 4 items of the list are used. The rest will be 
" silently ignored.
" The number of items in this list decides how many shifted function keys 
" are mapped.
let g:tex_hotkeyMaps = [
      \ 'equation*',
      \ 'align*',
      \ 'displaymath',
      \ 'enumerate'
      \ ]

" Similar to above mechanisms works <F7> key. It prompts for command with 
" list
" of commands from g:tex_PromptedCommands. There are not HotKeys for 
" commands.
" It works for commands of style \com{}. Changing of current command is done
" with <S-F7> 

let g:tex_promptCmds = [
      \ 'footnote',
      \ 'cite',
      \ 'pageref',
      \ 'label'
      \ ]

" }}}
" Smart Key Mappings: {{{
" Latex-suite shites with a number of 'smart' maps, where the behavior of
" standard keys is modified in a way which makes editing tex files easy.

" Pressing <BS> in insert mode checks to see whether we are just after
" something like \'{a} and if so, deletes all of it. i.e, diacritics are
" treated as single characters for backspacing.
" You might want to disable this feature, if you are editing
" Chinese, Japanese or Korean text.
" Setting this to zero will leave the <BS> key unmapped.
" Default: 1 
let g:tex_smartKeyBS = 1
" The pattern used to detect whether the previous characters comprise a
" diacritic character. This default pattern detects the standard LaTeX
" diacritics
let g:tex_smartBSPattern =
      \ '\(' .
      \ "\\\\[\"^'=v]{\\S}"      . '\|' .
      \ "\\\\[\"^'=]\\S"         . '\|' .
      \ '\\v \S'                 . '\|' .
      \ "\\\\[\"^'=v]{\\\\[iI]}" . '\|' .
      \ '\\v \\[iI]'             . '\|' .
      \ '\\q \S'                 . '\|' .
      \ '\\-'                    .
      \ '\)' . "$"

" Pressing " (english double quote) will insert `` or '' by making an
" intelligent guess about whether we intended to open or close a quote.
" Default: 1 
let g:tex_smartKeyQuote = 1

" Users of other languages might want to change the quote characters to suit
" their locale.  These global values will be ignored if there are 
" buffer-local
" versions, which may be set in the language-specific package files, such as
" ftplugin/latex-suite/packages/german
let g:tex_smartQuoteOpen = "``"
let g:tex_smartQuoteClose = "''"

" Latex-suite maps the <space> key in such a way that $ characters are not
" broken across lines.
" NOTE: Setting this to 1 has the side-effect of making the 'tw' setting be 
" 0.
" Default: 
let g:tex_smartKeySpace = 0

" Pressing ... (3 dots) results in \ldots outside math mode and \cdots in 
" math mode.
"
" TODO: Make it more intelligent within math mode. For example $1+...+3$ 
" should expand to $1+\cdots+n$, whereas $1,...,n$ should expand
"   to $1,\ldots,n$. The amsmath package actually provides a command \dots
"   which does this. Maybe use that if amsmath is detected?
" Default: 1
let g:tex_smartKeyDot = 1

" }}}
" Advanced Math: {{{
" These mappings allow for fast inserting of math constructions brackets, 
" better handling of space in math mode, unfortunately
" they use <M-> mappings which conflicts with some encodings. This is easy 
" way of turning them off. 
"
" <M-b> encloses the previous character in \mathbf{}
" <M-c> is polymorphic as follows:
"     Insert mode:
"     1. If the previous character is a letter or number, then capitalize it
"        and enclose it in \mathcal{};
"     2. otherwise, insert \cite{}.
"     Visual Mode:
"     1. Enclose selection in \mathcal{}
" <M-l> is also polymorphic as follows:
"     If the character before typing <M-l> is one of '([{|<q', then do the
"     following:
"       1. (<M-l>       \left(\right
"               similarly for [, |
"          {<M-l>       \left\{\right\}
"       2. <<M-l>       \langle\rangle
"       3. q<M-l>       \lefteqn{}
"     otherwise insert  \label{}
" <M-i> inserts \item commands at the current cursor location depending on
"       the surrounding environment. For example, inside itemize, it will
"       insert a simple \item, but within a description, it will insert
"       \item[<+label+>] etc.
"
" Default: 0
let g:tex_advMath = 0

" }}}

" }}}
" ==========================================================================
" TeX Completion: {{{

" Options for controlling the window sizes of the completion windows {{{

" The height of the window which contains the \label's (when completing a
" \ref) or bibtex entries (when completing a \cite). This option is used in
" the newer methods of completing \ref's and \cite's.
let g:tex_outlineWinHeight = 15

" Options for preview window for ref/cite completion. The next two options
" are used only when g:tex_UseOutlineCompletion = 0 or
" g:tex_UseCiteCompletionVer2 = 0, i.e, when we use a classic method of
" completing \refs and \cites.
" Height of cwindow
let g:tex_viewerCwinHeight = 5 
" Height of preview window
let g:tex_viewerPreviewHeight = 10 

" Options for explorer completion.
" Height of explorer window
let g:tex_ExplorerHeight = 10

" Directory for images. Read |latex-completion-explorer| before changing
let g:tex_imgDir = "img"

" }}}
" Options for completing a \ref {{{

" Whether to use the "outline mode" for displaying the \label's while doing
" \ref completion. In this mode, each label is displayed within the
" document element it resides in. The entire thing is folded to ease
" navigation. Should be easier/faster than the classical mode.
let g:tex_useOutlineCompletion = 1

" This option should be set via the .latexmain file. It should be a newline
" seperated list of files which make up all the "source" files in the
" current project. This enables latex-suite to skip the more complicated
" algorithm of finding the source files by recursively searching for
" \input'ed files from the |latex-master-file|.
"
" Only used when g:tex_UseOutlineCompletion = 0.
let g:tex_projSrcFiles = v:null

" Whether latex-suite simply searches for \\label's in all the .tex file
" found in the current directory or whether it will use a more complex
" algorithm. This is used only g:tex_UseOutlineCompletion = 0 and
" g:tex_ProjectSourceFiles = v:null.
" See :help Tex_UseSimpleLabelSearch for more information
let g:tex_useSimpleLabelSearch = 0

" }}}
" Options for completing a \cite'ation {{{

" If set to 1, then the newer way of presenting the bibtex entries is used.
" Instead of a |cwindow| showing just the keys and a synced |preview|
" window beneath, show a single window containing a nicely formatted list
" of bibtex entries. This should be faster and easier to use than the
" classic mode
let g:tex_useCiteCompletionVer2 = 1

" This is a string which is displayed to the user when he wants to sort or
" filter the bibtex entries. This string also serves to define acronyms for
" the various fields of a bibtex entry. 
let g:tex_bibFieldPrompt =
      \ "Field acronyms: (`:let g:tex_EchoBibFields= 0` to avoid ".
      \ "this message)\n" .
      \ " [t] title         [a] author        [b] booktitle     \n" .
      \ " [j] journal       [y] year          [p] bibtype       \n" .
      \ " (you can also enter the complete field name)    \n"

" Whether or not to display the string above to aid the user in choosing
" the field to filter/sort with.
let g:tex_echoBibFields = 1

" A setting of this form defines the letter 'a' as standing for the field
" 'author'. Thus when the user types
" 	a ellington
" when asked to enter a filter, it is equivalent to the user specifying the
" filter
" 	author ellington
" let g:tex_BibAcronym_a = 'author'

" Whether or not to use Jabref to complete citations
" See
" 	:help latex-suite-jabref
" for more infomration
let g:tex_useJabref = 0

" whether or not searches for \cite's are cached.
let g:tex_rememberCiteSearch = 0
" Paths to the bibliography files and custom packages.
let g:tex_BIBINPUTS = v:null
let g:tex_TEXINPUTS = v:null

" }}}

" }}}
" ==========================================================================
" Menus: set the kinds of menus which you would like to see. {{{
"
" Setting this variable to zero will immediately disable _all_ menus. For 
" finer control set this to 1 and then play with the other options.
" Default: 1
let g:tex_menus = 0

" The location of the main menu
let g:tex_mainMenuLoc = 80

" Math contains a large number of tex math elemets such as arrows,
" mathematical fonts (\mathrm), mathematical diacritics (\dot), binary
" relational operators etc. This menu compromises about 75% of the menus.
" Default: 1 
let g:tex_mathMenus = 1 

" The following options control the "compactness" of the menus. 
"
" Setting this option to 1 makes the Font, Counter and Dimensioning menus to
" be collected together into a single 'Tex-Elements' menu. Setting this to 0
" creates seperate menus for each of them.
" Default: 1 
let g:tex_nestEltMenus = 1

" Sometimes when you are using a lot of packages with lots of options etc,
" then a lot of time might be spent at startup loading the menus.
" Setting the following variable to 0 will stop autoloading the packages 
" menu. You can still goto TeX-Suite.Configure Menu and load this after 
" startup.
" Default: 1
let g:tex_pkgMenu = 0
" The following option will create the packages option within the TeX-Suite
" menu.
" Default: 1
let g:tex_nestPkgMenu = 1

" This is the prefix added to the menu names created by latex suite.  Add a
" dot to the following option to nest the menus under the menu name before 
" the dot.
" NOTE: With a '.' as the last character of the following setting, every
" single menu created by latex suite will be nested under the same menu.
" Default: 'TeX-' 
let g:tex_menuPrefix = 'TeX-'

" Use utf-8 menus. There is plenty of math symbols in LaTeX. It is hard to
" remember them. You can display them with utf-8. Your system/GUI interface
" have to support utf-8. This addition is necessary for resetting 
" 'encoding'.
let g:tex_useUtfMenus = 0

if g:tex_useUtfMenus != 0 && has("gui_running")
  set encoding=utf-8
endif

" }}}
" ==========================================================================
" Folding: latex-suite comes with 'fake' syntax folding. {{{
"
" specifies whether the MakeTeXFolds() function will be defined. If this is
" set to zero, then esentially you have disabled all of latex-suite's 
" folding functions. no maps for refreshing folds will be set up etc.
" NOTE: However, the function TexFoldTextFunction() is still avaiable
"       and 'foldexpr' is set to point to it. This is so you can continue
"       using another folding scheme but still use the fold text function.
let g:tex_folding = 1

" specifies whether a latex file is automatically folded up when opened.  
" Setting this to zero means that a file is not folded up as soon as its
" opened.
" NOTE: the MakeTeXFolds() function will still be available (unless disabled
"       by g:tex_Folding), so you can do \rf to refresh/create folds.
let g:tex_autoFolding = 1

" }}}
" ==========================================================================
" Taglist: Support for taglist.vim {{{
"
" LaTeX-Suite offers now support for taglist.vim, the most popular Vim
" interface for ctags. You should use ctags version >= 5.0 and taglist >= 
" 3.0.
let g:tex_tagListSupport = 1

" This option turns on definition of tags for LaTeX.
" NOTE: In taglist window you may see duplicate entries for the same tag. It
"       means some definitions are repeated somewhere else. You can turn off
"       internal definitions or remove external (read ctags description
"       where).
let g:tex_internalTagDfns = 1

" }}}
" ==========================================================================

